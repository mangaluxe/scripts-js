<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Slide infini (Diapositive)</title>
    <link rel="stylesheet" href="assets/css/style-slide-infini.css">
</head>
<body>

    <h1>Slide responsive et infini</h1>

    <div class="slide-container"> <!-- position:relative (les positions absolute sont placées par rapport à lui). Avec overflow-x:hidden, on n'affiche qu'une image, on cache les images qui dépassent -->

        <div class="slide"> <!-- Utilise translateX pour afficher qu'une image -->
            <div><a href="#1"><img src="assets/img/1.jpg" alt=""><span>1. Lorem ipsum dolor sit, amet consectetur adipisicing elit. Voluptates, accusamus. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ipsum.</span></a></div>
            <div><a href="#2"><img src="assets/img/2.jpg" alt=""><span>2. Lorem ipsum dolor sit, amet consectetur.</span></a></div>
            <div><a href="#3"><img src="assets/img/3.jpg" alt=""><span>3. Lorem ipsum dolor sit, amet consectetur adipisicing elit.</span></a></div>
            <div><a href="#4"><img src="assets/img/4.jpg" alt=""><span>4. Lorem ipsum dolor sit, amet consectetur adipisicing elit. Voluptates, accusamus.</span></a></div>
            <div><a href="#5"><img src="assets/img/5.jpg" alt=""><span>5. Lorem ipsum dolor sit, amet consectetur adipisicing elit. Voluptates.</span></a></div>
        </div>

        <a class="slide-left">&#10094;</a>
        <a class="slide-right">&#10095;</a>

        <div class="dot-container">
            <!-- <span class="dot active" data-target="0"></span>
            <span class="dot" data-target="1"></span>
            <span class="dot" data-target="2"></span> -->

            <!-- On génère ces points de navigation en JS dynamiquement en fonction du nombre d'images -->
        </div>

    </div>
    <br><br>


    <div class="slide-container">

        <div class="slide">
            <div><a href="#1"><img src="assets/img/1.jpg" alt=""><span>1. Lorem ipsum dolor sit, amet consectetur adipisicing elit. Voluptates, accusamus.</span></a></div>
            <div><a href="#2"><img src="assets/img/2.jpg" alt=""><span>2. Lorem ipsum dolor sit, amet consectetur.</span></a></div>
            <div><a href="#3"><img src="assets/img/3.jpg" alt=""><span>3. Lorem ipsum dolor sit, amet consectetur adipisicing elit.</span></a></div>
            <div><a href="#4"><img src="assets/img/4.jpg" alt=""><span>4. Lorem ipsum dolor sit, amet consectetur adipisicing elit. Voluptates, accusamus.</span></a></div>
        </div>

        <a class="slide-left">&#10094;</a>
        <a class="slide-right">&#10095;</a>

        <div class="dot-container"></div>

    </div>
    <br><br>



    <script>
        "use strict";

        let i, j, clone;


        /* En créant cette fonction, on peut utiliser ce script pour plusieurs slides ! */
        function slider(el) {

            let slideIndex = 1; // Par défaut, on affiche l'index d'image 1. Pas 0, car l'index 0 sera un clone de la dernière image
            let slide = el.querySelector(".slide");
            let slideIn = el.querySelectorAll(".slide > div");
            let nbImg = slideIn.length; // Nombre d'images


            // ========== Création d'éléments : On génère la pagination (les points de navigation) dynamiquement en fonction du nombre d'images ==========

            /*
            On a : <div class="dot-container"></div>

            On veut obtenir :
            <div class="dot-container">
                <span class="dot active" data-target="1"></span>
                <span class="dot" data-target="2"></span>
                <span class="dot" data-target="3"></span>
                <span class="dot" data-target="4"></span>
                <span class="dot" data-target="5"></span>
            </div>
            */
            for (i = 0; i < nbImg; i++) { /* On a 5 images, donc nbImg = 5. Il va donc créer 5 points en tout dans cette boucle */
                const node = document.createElement("span"); // On crée un élément <span>

                if (i === 0) {node.setAttribute("class", "dot active");}
                else {node.setAttribute("class", "dot");} // On lui donne la class="dot"
                
                node.setAttribute("data-target", i+1); // On lui donne l'attribut data-target="i+1". On doit décaler de 1 à cause de l'image clonée
                el.querySelector(".dot-container").appendChild(node); // On colle dans <div class="dot-container"></div> comme un enfant
            }

            const dots = el.querySelectorAll(".dot"); // On sélectionne les points de pagination après leur création


            // ========== Clonage au chargement : Clone la première et la dernière image pour créer un slide infini ==========

            clone = slideIn[nbImg - 1].cloneNode(true);
            slide.insertBefore(clone, slideIn[0]); // On clone la dernière image et on insère au début
            
            clone = slideIn[0].cloneNode(true);
            slide.appendChild(clone); // On clone la première image et on insère à la fin


            // ========== Changement d'images et de point de navigation actif ==========

            function slideGoto(slideIndex) {          
                slide.style.transform = "translateX(-" + slideIndex * 100 + "%)"; // On utilise la technique du translateX pour changer d'images
                
                el.querySelector(".dot.active").classList.remove("active"); // Enlève l'ancien point actif. On vise bêtement class="dot active"

                // Update point de navigation actif :
                // let dotIndex = slideIndex-1;
                // if (slideIndex >= nbImg+1) {dotIndex = 0;}
                // if (slideIndex <= 0) {dotIndex = nbImg-1;}

                let dotIndex = (slideIndex - 1 + nbImg) % nbImg; // Equivalent à ci-dessus avec modulo

                dots[dotIndex].classList.add("active"); // Affiche le nouveau point actif

                console.log("slideIndex: " + slideIndex);
            }


            // ========== Au clic sur les flèches ==========

            function slidePrev() { // -1 à l'index

                if (slideIndex <= 1) {
                    slideIndex = nbImg+1;
                    slide.style.transition = "none";
                    slideGoto(slideIndex);
                }

                setTimeout(function () { // On met un setTimeout() pour que ce code s'exécute après ce qu'il y a au dessus
                    slideIndex--;
                    slide.style.transition = "all 0.5s";
                    slideGoto(slideIndex);
                }, 50);

            }

            function slideNext() { // +1 à l'index
    
                if (slideIndex >= nbImg) {
                    slideIndex = 0;
                    slide.style.transition = "none";
                    slideGoto(slideIndex);
                }

                setTimeout(function () {
                    slideIndex++;
                    slide.style.transition = "all 0.5s";
                    slideGoto(slideIndex);
                }, 50);

            }

            el.querySelector(".slide-left").addEventListener("click", slidePrev); // Ecouteurs d'événements sur flèche gauche
            el.querySelector(".slide-right").addEventListener("click", slideNext); // Ecouteurs d'événements sur flèche droite


            // ========== Au clic sur les points ==========

            // Pour savoir sur quel point on a cliqué :
            function currentSlide(e) {
                slideIndex = parseInt(e.target.getAttribute("data-target"), 10); // Recup du numéro d'index au clic. "data-target" qu'on récupère dans le html est une chaîne. parseInt() la convertit en nombre entier

                let dotIndex = (slideIndex-1 + nbImg) % nbImg;
                
                slideGoto(dotIndex+1); // Appel à la fonction pour mettre à jour l'image et le point actif
            }

            for (i = 0; i < dots.length; i+=1) {
                dots[i].addEventListener("click", currentSlide); // Ecouteurs d'événements sur les points
            }


            // ========== Auto (Mettre ci-dessous en commentaire si on ne veut pas) ==========

            // setInterval(slideNext, 3000); // Appel à la fonction slideNext() toutes x millisecondes dès le chargement


            
            // ========== Glisser au doigt sur écran tactile (facultatif) ==========

            let startX = 0;
            let endX = 0;

            function dragEnd(e) {
                e = e || window.event; // window.event pour ancienne version d'IE

                // if (e.changedTouches) { /* Avec touchstart (tactile) */
                //     endX = e.changedTouches[0].screenX;
                // }
                // else { /* Avec mousedown (souris) */
                //     endX = e.screenX;
                // }

                // Détection du type d'événement (touchend ou mouseup) :
                let eventType = e.changedTouches ? "touchend" : "mouseup";
                endX = eventType === "touchend" ? e.changedTouches[0].screenX : e.screenX;

                // Ignorer petit mouvement :
                let diff = startX / endX;
                // console.log(diff);
                if (diff > 0.97 && diff < 1.03) { // Marche aussi avec: if (Math.abs(diff - 1) < 0.03) {
                    return; // Met fin à la fonction
                }

                if (endX < startX) {
                    slideNext(); // Appel à cette fonction
                }
                
                else if (endX > startX) {
                    slidePrev(); // Appel à cette fonction
                }
            }
            
            function dragStart(e) {
                e = e || window.event; // window.event pour ancienne version d'IE

                // if (e.changedTouches) { /* Avec touchstart (tactile) */
                //     startX = e.changedTouches[0].screenX;
                // }
                // else { /* Avec mousedown (souris) */
                //     e.preventDefault(); // Annule l'interdiction de drag. Attention ⚠ : rend les liens incliquables sur écrans tactiles. Ne pas mettre pour écrans tactiles !

                //     startX = e.screenX;
                // }

                // Détection du type d'événement (touchstart ou mousedown) :
                let eventType = e.changedTouches ? "touchstart" : "mousedown";
                if (eventType === "mousedown") {
                    e.preventDefault();
                }
                startX = (eventType === "touchstart") ? e.changedTouches[0].screenX : e.screenX;

                slide.addEventListener("mouseup", dragEnd);
            }

            slide.addEventListener("touchstart", dragStart); // Quand on touche l'écran tactile
            slide.addEventListener("mousedown", dragStart); // Quand on clique

            slide.addEventListener("touchend", dragEnd);
            // slide.addEventListener("mouseup", dragEnd); // Pas besoin, car on a déjà mis ça dans la fonction dragStart

        }


        const slideContainers = document.querySelectorAll(".slide-container");
        for (j = 0; j < slideContainers.length; j++) {
            slider(slideContainers[j]); // Appel à la fonction slider() au chargement 
        }

    </script>

</body>
</html>