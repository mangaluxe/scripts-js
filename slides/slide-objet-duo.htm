<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Slide (Diapositive)</title>
    <style>
        body {
            margin: 0;
            font-size: 15px;
        }
        * {box-sizing: border-box}
        h1 {text-align: center;}

        /* ==================== Slide (Diapositive) ==================== */

        /* ----- Images ----- */

        .slide-container {
            max-width: 800px; /* On peut diminuer la taille, car les images sont responsives */
            margin: auto;
            position: relative; /* Les positions absolutes sont placées par rapport à cette div */
        }

        .overflow-x-hidden {overflow-x: hidden}
        
        .slide {
            white-space: nowrap; /* Sans cela, les blocs passent à la ligne */
            transform: translateX(0%); /* Par défaut */
            transition: transform .4s;
        }

        .slide a {
            display: inline-block;
            width: 50%;
            position: relative;
        }

        .slide img {
            width: 100%;
            height: auto;
            vertical-align: middle;
            padding: 10px;
            border-radius: 15px;
        }

        .slide span {
            position: absolute;
            bottom: 0px;
            left: 0px;
            width: calc(100% - 20px);
            padding: 10px;
            margin: 10px;
            border-radius: 0 0 5px 5px;
            background-color: rgba(0, 0, 0, 0.6);
            color: white;
            font: 1em sans-serif;
            white-space: normal; /* Remettre par défaut */
        }

        /* ----- Flèches << >> ----- */

        .slide-left,
        .slide-right {
            cursor: pointer;
            position: absolute;
            top: 50%;
            width: auto;
            padding: 9px 15px;
            margin-top: -22px;
            color: white; /* Flèches blanches */
            font: bold 2em;
            transition: 0.6s ease;
            border-radius: 50%;
            background-color: rgba(0, 0, 0, .5);
        }

        .slide-right {
            right: 0; /* Positionner bouton flèche à droite */
        }

        .slide-left:hover,
        .slide-right:hover {
            background-color: rgba(0, 0, 0, 1);
        }

        /* ----- Petits points indicateurs ----- */
        
        .dots {
            position: absolute;
            bottom: -28px;
        }

        .dot {
            cursor: pointer;
            height: 15px;
            width: 15px;
            margin: 0 2px;
            background-color: #bbb;
            border-radius: 50%;
            display: inline-block;
            transition: background-color .6s ease;
        }

        .dot.active {
            background-color: #717171;
        }

        .dot:hover {
            background-color: #4487be;
        }

        .flex-center {
            display: flex;
            justify-content: center;
        }


        @media screen and (max-width: 600px) {
            .slide a {
                width: 100%;
            }
        }

    </style>
</head>
<body>

    <h1>Slide responsive</h1>

    <div class="slide-container" id="slide1">
        <div class="overflow-x-hidden">
            <div class="slide">
                <a href="#1"><img src="img/1.jpg" alt=""><span>Lorem ipsum dolor sit, amet consectetur adipisicing elit. Voluptates, accusamus. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ipsum.</span></a><a href="#2"><img src="img/2.jpg" alt=""><span>Lorem ipsum dolor sit, amet consectetur.</span></a><a href="#3"><img src="img/3.jpg" alt=""><span>Lorem ipsum dolor sit, amet consectetur adipisicing elit..</span></a><a href="#4"><img src="img/4.jpg" alt=""><span>Lorem ipsum dolor sit, amet consectetur adipisicing elit. Voluptates, accusamus.</span></a><a href="#5"><img src="img/5.jpg" alt=""><span>Lorem ipsum dolor sit, amet consectetur adipisicing elit. Voluptates.</span></a><a href="#6"><img src="img/6.jpg" alt=""><span>Lorem ipsum dolor sit, amet consectetur adipisicing elit. Voluptates !</span></a>
            </div>
        </div>
        
        <a class="slide-left">&#10094;</a>
        <a class="slide-right">&#10095;</a>

        <div class="flex-center">
            <div class="dots">
                <!-- <span class="dot active" data-target="0"></span>
                <span class="dot" data-target="1"></span>
                <span class="dot" data-target="2"></span> -->

                <!-- On génère ces points automatiquement avec le JS pour éviter d'ajouter des points manuellement à chaque fois qu'on rajoute des images -->
            </div>
        </div>
    </div>

    <br><br>

    <div class="slide-container" id="slide2">
        <div class="overflow-x-hidden">
            <div class="slide">
                <a href="#1"><img src="img/1.jpg" alt=""><span>Lorem ipsum dolor sit, amet consectetur adipisicing elit. Voluptates, accusamus.</span></a><a href="#2"><img src="img/2.jpg" alt=""><span>Lorem, ipsum dolor sit amet consectetur adipisicing elit. Quam architecto totam praesentium.</span></a><a href="#3"><img src="img/3.jpg" alt=""><span>Lorem ipsum dolor sit, amet consectetur adipisicing elit..</span></a><a href="#4"><img src="img/4.jpg" alt=""><span>Lorem ipsum dolor sit amet consectetur adipisicing elit. Veniam, temporibus? Cumque.</span></a><a href="#5"><img src="img/5.jpg" alt=""><span>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Nostrum.</span></a>
            </div>
        </div>
        
        <a class="slide-left">&#10094;</a>
        <a class="slide-right">&#10095;</a>

        <div class="flex-center">
            <div class="dots">
                <!-- <span class="dot active" data-target="0"></span>
                <span class="dot" data-target="1"></span>
                <span class="dot" data-target="2"></span> -->
            </div>
        </div>
    </div>



    <script>

        let i, ratio;
        let maxx = window.matchMedia("(max-width: 600px)"); // Largeur qui déclenche le change d'état

        /* Grâce à la programmation orientée objet en JS, on peut utiliser le script directement pour plusieurs slides. Attention : Incompatible Internet Explorer.  Pour la compatibilité, il faut utiliser Grunt pour convertir. Dans Grunt, il faut utiliser i+=1 au lieu de i++, et i-=1 au lieu de i-- */

        class Slide {

            /**
            * @param {HTMLElement} element
            */
            constructor (element) {
                this.element = element;
                this.index = 0; // Index pour l'élément actuel (grâce aux objets, on a un index pour chaque élément indépendamment)

                this.clic(); // Appel à cette fonction au chargement
                // this.clicDot(); // La fonction onWindowResize() appelle déjà cette fonction

                this.autoSlide(); // À mettre en commentaire si on ne veut pas. Et aussi la fonction ci-dessous

                this.onWindowResize(); // Appel à la fonction au chargement

                // window.addEventListener("resize", this.onWindowResize.bind(this)); // Appel à la fonction au redimensionnellement de la fenêtre. Mauvaise méthode, car exécute cette fonction en permanent dès qu'on redimensionne la fenêtre. Il faut mieux utiliser la méthode avec matchMedia

                maxx.addListener(this.onWindowResize.bind(this)); // Appel à la fonction uniquement au changement d'état (ici quand la largeur passe au-dessus ou en-dessous 600px)
            }

            /* Dans une class, il n'y aura pas de conflit si on utilise un nom de méthode (fonction) déjà utilisé dans une autre class */


            /* ----- Changement images ----- */

            slideGoto() {
                // changer image :
                this.element.querySelector(".slide").style.transform = "translateX(-" + this.index * 100 + "%)";
                // console.log(this.index);

                // Update point actif :
                let dot = this.element.getElementsByClassName("dot");
                for (i = 0; i < dot.length; i++) {
                    dot[i].classList.remove("active"); // Enlève l'ancien point actif
                }
                dot[this.index].classList.add("active"); // Afficher le point active
            }


            /* ----- Au clic sur les flèches ----- */

            next() {
                // console.log(this.element.querySelectorAll("img").length/ratio)-1; // Avec 5 images, on obtient 2,5. Donc il faut arrondir à 3 avec Math.ceil pour afficher 3 groupes de 2 images.

                if (this.index < Math.ceil((this.element.querySelectorAll("img").length/ratio)-1)) {this.index++;}
                else {this.index = 0;}

                this.slideGoto();
            }

            prev() {
                // console.log(this.element.querySelectorAll("img").length/ratio)-1; // Avec 5 images, on obtient 2,5. Donc il faut arrondir à 3 avec Math.ceil pour afficher 3 groupes de 2 images.

                if (this.index > 0) {this.index--;}
                else {this.index = Math.ceil((this.element.querySelectorAll("img").length/ratio)-1);}

                this.slideGoto();
            }

            /* Ecouteurs d'événements au clic sur flèche gauche ou droite */
            clic() {
                this.element.querySelector(".slide-left").addEventListener("click", this.prev.bind(this)); // bind() crée une nouvelle fonction qui, lorsqu'elle est appelée, a pour contexte "this" la valeur passée en paramètre et éventuellement une suite d'arguments qui précéderont ceux fournis à l'appel de la fonction créée.
                this.element.querySelector(".slide-right").addEventListener("click", this.next.bind(this));
            }


            /* ----- Au clic sur les points ----- */
            
            /* Pour savoir sur quel point on a cliqué */
            widthDot(ev) {
                this.index = parseInt(ev.target.getAttribute("data-target"), 10);

                this.slideGoto();
            }

            /* Ecouteurs d'événements sur les points */
            clicDot() {
                for (i = 0; i < this.element.getElementsByClassName("dot").length; i++) {
                    this.element.getElementsByClassName("dot")[i].addEventListener("click", this.widthDot.bind(this));
                }
            }


            /* ----- Auto (Mettre ci-dessous en commentaire si on ne veut pas) ----- */

            autoSlide() {
                // setInterval(next, 3000); // Ne marche pas dans une class

                var t = this;
                setInterval(function () {
                    t.next(); // Appel à cette fonction toutes x millisecondes
                }, 3000);
            }


            /* ----- Redimensionnement de la fenêtre et création d'éléments ----- */

            onWindowResize() {
                // if (window.innerWidth < 600) { /* Marche aussi */
                if (maxx.matches) {
                    ratio = 1; /* Mobile */
                }
                else {
                    ratio = 2; /* Bureau */
                }

                /* --- Suppresion d'éventuels anciens éléments avant la création d'éléments --- */
                
                while (this.element.querySelector(".dots").hasChildNodes()) {
                    this.element.querySelector(".dots").removeChild(this.element.querySelector(".dots").firstChild);
                }

                /* --- Création d'éléments ---

                On a : <div class="dots"></div>

                On veut obtenir :
                <div class="dots">
                    <span class="dot active" data-target="0"></span>
                    <span class="dot" data-target="1"></span>
                    <span class="dot" data-target="2"></span>
                    <span class="dot" data-target="3"></span>
                    <span class="dot" data-target="4"></span>
                </div>
                */

                console.log(this.element.querySelectorAll("img").length/ratio);

                for (i = 0; i < this.element.querySelectorAll("img").length/ratio; i++) {
                    var node = document.createElement("span"); // On crée un élément <span>
                    if (i === 0) {node.setAttribute('class', 'dot active');} else {node.setAttribute('class', 'dot');} // On lui donne la class="dot"
                    node.setAttribute('data-target', i); // On lui donne l'attribut data-target="i"
                    this.element.querySelector(".dots").appendChild(node); // On colle dans <div class="dots"> comme un enfant                   
                }

                this.clicDot(); // Ecouteur d'évenement sur les points après la création de points

                this.index = 0; // Initialisation de l'image au chargement et au changement d'état. Image 1 par défaut
                this.slideGoto();
            }

        }



        document.addEventListener('DOMContentLoaded', function () {

            let slide1 = document.getElementById("slide1");
            let slide2 = document.getElementById("slide2");

            if (slide1) {
                new Slide(slide1); // Seul défaut avec les JS orienté objet, il faut mettre new à chaque fois. Ce qui peut poser problème si leur nombre diffère sur chaque page
            }
            if (slide2) {
                new Slide(slide2);
            }

        });

    </script>

</body>
</html>